/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace SupplyChainVerifier {
  export type ProductStruct = {
    id: BigNumberish;
    name: string;
    origin: string;
    manufacturingDate: BigNumberish;
    manufacturer: AddressLike;
    isVerified: boolean;
    metadata: string;
  };

  export type ProductStructOutput = [
    id: bigint,
    name: string,
    origin: string,
    manufacturingDate: bigint,
    manufacturer: string,
    isVerified: boolean,
    metadata: string
  ] & {
    id: bigint;
    name: string;
    origin: string;
    manufacturingDate: bigint;
    manufacturer: string;
    isVerified: boolean;
    metadata: string;
  };
}

export interface SupplyChainVerifierInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "DISTRIBUTOR_ROLE"
      | "MANUFACTURER_ROLE"
      | "RETAILER_ROLE"
      | "addDistributor"
      | "addRetailer"
      | "getProduct"
      | "getProductCount"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "products"
      | "registerProduct"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "verifyProduct"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ProductRegistered"
      | "ProductVerified"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DISTRIBUTOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MANUFACTURER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RETAILER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addDistributor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addRetailer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProduct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProductCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "products",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerProduct",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyProduct",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DISTRIBUTOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MANUFACTURER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RETAILER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRetailer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProduct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProductCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "products", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyProduct",
    data: BytesLike
  ): Result;
}

export namespace ProductRegisteredEvent {
  export type InputTuple = [
    productId: BigNumberish,
    name: string,
    manufacturer: AddressLike
  ];
  export type OutputTuple = [
    productId: bigint,
    name: string,
    manufacturer: string
  ];
  export interface OutputObject {
    productId: bigint;
    name: string;
    manufacturer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductVerifiedEvent {
  export type InputTuple = [productId: BigNumberish, verifier: AddressLike];
  export type OutputTuple = [productId: bigint, verifier: string];
  export interface OutputObject {
    productId: bigint;
    verifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SupplyChainVerifier extends BaseContract {
  connect(runner?: ContractRunner | null): SupplyChainVerifier;
  waitForDeployment(): Promise<this>;

  interface: SupplyChainVerifierInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DISTRIBUTOR_ROLE: TypedContractMethod<[], [string], "view">;

  MANUFACTURER_ROLE: TypedContractMethod<[], [string], "view">;

  RETAILER_ROLE: TypedContractMethod<[], [string], "view">;

  addDistributor: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  addRetailer: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  getProduct: TypedContractMethod<
    [productId: BigNumberish],
    [SupplyChainVerifier.ProductStructOutput],
    "view"
  >;

  getProductCount: TypedContractMethod<[], [bigint], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  products: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, string, boolean, string] & {
        id: bigint;
        name: string;
        origin: string;
        manufacturingDate: bigint;
        manufacturer: string;
        isVerified: boolean;
        metadata: string;
      }
    ],
    "view"
  >;

  registerProduct: TypedContractMethod<
    [name: string, origin: string, metadata: string],
    [bigint],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  verifyProduct: TypedContractMethod<
    [productId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DISTRIBUTOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MANUFACTURER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "RETAILER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addDistributor"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addRetailer"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getProduct"
  ): TypedContractMethod<
    [productId: BigNumberish],
    [SupplyChainVerifier.ProductStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProductCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "products"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, string, boolean, string] & {
        id: bigint;
        name: string;
        origin: string;
        manufacturingDate: bigint;
        manufacturer: string;
        isVerified: boolean;
        metadata: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerProduct"
  ): TypedContractMethod<
    [name: string, origin: string, metadata: string],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "verifyProduct"
  ): TypedContractMethod<[productId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "ProductRegistered"
  ): TypedContractEvent<
    ProductRegisteredEvent.InputTuple,
    ProductRegisteredEvent.OutputTuple,
    ProductRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "ProductVerified"
  ): TypedContractEvent<
    ProductVerifiedEvent.InputTuple,
    ProductVerifiedEvent.OutputTuple,
    ProductVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "ProductRegistered(uint256,string,address)": TypedContractEvent<
      ProductRegisteredEvent.InputTuple,
      ProductRegisteredEvent.OutputTuple,
      ProductRegisteredEvent.OutputObject
    >;
    ProductRegistered: TypedContractEvent<
      ProductRegisteredEvent.InputTuple,
      ProductRegisteredEvent.OutputTuple,
      ProductRegisteredEvent.OutputObject
    >;

    "ProductVerified(uint256,address)": TypedContractEvent<
      ProductVerifiedEvent.InputTuple,
      ProductVerifiedEvent.OutputTuple,
      ProductVerifiedEvent.OutputObject
    >;
    ProductVerified: TypedContractEvent<
      ProductVerifiedEvent.InputTuple,
      ProductVerifiedEvent.OutputTuple,
      ProductVerifiedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
